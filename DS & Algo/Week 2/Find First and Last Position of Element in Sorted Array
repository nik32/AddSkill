class Solution {
public:
    int left(const vector<int> nums, const int target)
    {
        int l = 0, r = nums.size() - 1, mid;
        
        while(l <= r)//binary search to find leftmost target index
        {
            mid = (l+r)/2;
            if(nums[mid] == target)
                if(mid && nums[mid-1] == target)
                    r = mid - 1;
                else    
                    return mid;
            else if(nums[mid] > target)
                r = mid - 1;
            else
                l = mid + 1;
        }
        return -1;
    }
    
    int right(const vector<int> nums, const int target)
    {
        int n = nums.size();
        int l = 0, r = n - 1, mid;
        
        while(l <= r)//binary search to find rightmost target index
        {
            mid = (l+r)/2;
            if(nums[mid] == target)
                if(mid < n - 1 && nums[mid+1] == target)
                    l = mid + 1;
                else    
                    return mid;
            else if(nums[mid] > target)
                r = mid - 1;
            else
                l = mid + 1;
        }
        return -1;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans = {-1, -1};
        
        if(!nums.size())
            return ans;
        
        ans[0] = left(nums, target);
        ans[1] = right(nums, target);
        
        return ans;
    }
};
